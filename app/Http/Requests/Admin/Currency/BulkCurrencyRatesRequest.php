<?php

namespace App\Http\Requests\Admin\Currency;

use Illuminate\Foundation\Http\FormRequest;

class BulkCurrencyRatesRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    protected function prepareForValidation(): void
    {
        // –∏–∑–≤–ª–µ–∫–∞–µ–º base –∏–∑ route model binding
        $routeCurrency = $this->route('currency');
        $baseId = is_object($routeCurrency)
            ? (int) data_get($routeCurrency, 'id', 0)
            : (int) ($routeCurrency ?? 0);

        $inputRates = $this->input('rates', []);
        $normalized = [];

        if (is_array($inputRates)) {
            foreach ($inputRates as $item) {
                // number: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π
                $raw = (string) ($item['rate'] ?? '');
                $num = str_replace(',', '.', $raw);
                $rate = is_numeric($num) ? $num + 0 : null;

                // provider
                $provider = $item['provider'] ?? null;
                $provider = is_string($provider) && trim($provider) !== '' ? trim($provider) : null;

                // bool
                $isManual = filter_var($item['is_manual'] ?? true, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);
                if ($isManual === null) $isManual = true;

                $normalized[] = [
                    'base_currency_id'  => $baseId, // üëà –í–°–ï–ì–î–ê –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
                    'quote_currency_id' => (int) ($item['quote_currency_id'] ?? 0),
                    'rate'              => $rate,
                    'provider'          => $provider, // –º–æ–∂–µ—Ç –±—ã—Ç—å null
                    'is_manual'         => $isManual,
                    // fetched_at –Ω–µ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç now()
                ];
            }
        }

        $this->merge(['rates' => $normalized]);
    }

    public function rules(): array
    {
        return [
            'rates'                         => ['required','array','min:1'],

            'rates.*.base_currency_id'      => ['required','integer','exists:currencies,id'],
            'rates.*.quote_currency_id'     => ['required','integer','exists:currencies,id','different:base_currency_id'],

            // –¥–æ 18 –∑–Ω–∞–∫–æ–≤ ‚Äî –∫–∞–∫ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            'rates.*.rate'                  => ['required','numeric','gt:0','decimal:0,18'],

            // —É–±—Ä–∞–ª–∏ Rule::in ‚Äî –¥–æ–ø—É—Å–∫–∞–µ–º –ª—é–±–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä/–∏–ª–∏ null
            'rates.*.provider'              => ['nullable','string','max:50'],
            'rates.*.is_manual'             => ['required','boolean'],
        ];
    }

    public function messages(): array
    {
        return [
            // –°–∞–º –º–∞—Å—Å–∏–≤
            'rates.required' => '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Å–∏–≤ –∫—É—Ä—Å–æ–≤.',
            'rates.array'    => '–ü–æ–ª–µ ¬´–∫—É—Ä—Å—ã¬ª –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º.',
            'rates.min'      => '–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—É—Ä—Å.',

            // base_currency_id
            'rates.*.base_currency_id.required' => '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞.',
            'rates.*.base_currency_id.integer'  => '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.',
            'rates.*.base_currency_id.exists'   => '–£–∫–∞–∑–∞–Ω–Ω–∞—è –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',

            // quote_currency_id
            'rates.*.quote_currency_id.required'  => '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞.',
            'rates.*.quote_currency_id.integer'   => '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.',
            'rates.*.quote_currency_id.exists'    => '–£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
            'rates.*.quote_currency_id.different' => '–ë–∞–∑–æ–≤–∞—è –∏ –∫–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.',

            // rate
            'rates.*.rate.required' => '–£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å.',
            'rates.*.rate.numeric'  => '–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ç–æ—á–∫—É).',
            'rates.*.rate.gt'       => '–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.',
            'rates.*.rate.decimal'  => '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —É –∫—É—Ä—Å–∞ (–º–∞–∫—Å. 18).',

            // provider
            'rates.*.provider.string' => '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π.',
            'rates.*.provider.max'    => '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å :max —Å–∏–º–≤–æ–ª–æ–≤.',

            // is_manual
            'rates.*.is_manual.required' => '–ü—Ä–∏–∑–Ω–∞–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.',
            'rates.*.is_manual.boolean'  => '–ü–æ–ª–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.',
        ];
    }

    public function attributes(): array
    {
        return [
            'rates'                        => '–∫—É—Ä—Å—ã',
            'rates.*.base_currency_id'     => '–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞',
            'rates.*.quote_currency_id'    => '–∫–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞',
            'rates.*.rate'                 => '–∫—É—Ä—Å',
            'rates.*.provider'             => '–ø—Ä–æ–≤–∞–π–¥–µ—Ä',
            'rates.*.is_manual'            => '—Ä—É—á–Ω–æ–π –≤–≤–æ–¥',
        ];
    }

}
